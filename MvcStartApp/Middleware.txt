Жизненный цикл запросов, компоненты Middleware

Поскольку большинство веб-приложений работают по протоколу HTTP, всё, что происходит внутри, сводится к обработке запроса

Что происходит далее после получения запроса в самом приложении, на каждом этапе?
Происходит последовательное прохождение запроса через все подключенные компоненты (или middleware — ПО промежуточного слоя). 
Совокупность таких компонентов и называется конвейером.

Соответственно, первый компонент, получивший запрос, передаёт его по цепочке дальше (похоже на паттерн цепочка обязаностей)
Подключаются компоненты Middleware в методе Configure из класса Startup


!!Конвейер запросов
Каждый компонент middleware либо обработает запрос сам и прервёт цепочку, либо передаст дальше
Middleware настраиваются и запускаются с помощью методов объекта IApplicationBuilder, который передается в метод Configure из класса Startup.


!!Порядок подключения
Всегда при отладке компонентов нужно иметь в виду правильный порядок их подключения, иначе вы рискуете потратить лишнее время на поиск неочевидных ошибок.


!!Встроенные компоненты
Authentication	app.UseAuthentication(); Поддержка аутентификации.
Cookie Policy	app.UseAuthentication().AddCookies() Отслеживание взаимодействия пользователя с куками.
MVC	app.UseMVC(); Предоставляет функционал ASP.NET MVC.
и так далее...

!!Жизненный цикл
При запуске Core-приложения и создании объекта Startup компоненты Middleware создаются один раз и активны в течение всего жизненного цикла приложения. 

Часто встречающихся методах, вызываемых средой выполнения в классе Startup:

1 Run
2 Use
3 Map


!!Кастомные Middleware
Методы Use и Map позволяют нам организовывать порядок обработки запроса в конвейере так, как нам необходимо
LoggingMiddleware - делаем свой промежуточный слой для логирования


!!Окружение
Наше приложение запускается в некой среде или окружении. 
Для взаимодействия с этой средой применяются объекты, реализующие интерфейс IHostingEnvironment.

Основные его свойства:
ApplicationName — содержит имя приложения.
EnvironmentName — описывает среду, в которой приложение размещено.
ContentRootPath — путь к корневой папке приложения.
WebRootPath — путь к папке со статическим контентом (то есть веб-страницы, HTML, CSS и так далее).

Значение может задаваться вместе с другими параметрами конфигурации запуска в файле launchsettings.json
У нас стоит конфигурация Development, то есть для каждого из вариантов размещения у нас установлен запуск проекта в режиме разработки. 
Обычно, когда проект запускается в реальном окружении, заданные тут параметры переопределяются и заменяются на соответствующие боевому окружению.

"launchBrowser": false - чтобы каждый раз не запускался браузер

Для определения того, соответствует ли конфигурация основным значением, интерфейс IWebHostEnvironment даже определяет специальные методы:
IsEnvironment (string envName) — проверяет на соответствие заданному имени среды. Свои названия окружения среды задавать тоже можно.
IsDevelopment() проверяет, что среда — Development.
IsStaging() проверяет, что среда — Staging.
IsProduction() проверяет, что среда — Production.