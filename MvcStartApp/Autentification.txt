Аутентификация/авторизация

IoC (Inversion of Control) - инверсия управления. 
Основная цель инверсии управления — удаление зависимостей между объектами приложения.

IoC и DI позволяют разорвать зависимости между компонентами в вашем приложении и упростить тестирование и поддержку вашего приложения.
Однако инверсия управления и внедрение зависимостей — это не одно и то же.

Инверсия управления (IoC) — это шаблон проектирования, в котором поток управления программы инвертируется. 
IoC обычно используется для того, чтобы: 
- отделить компоненты вашего приложения, 
- поменять местами реализации зависимостей,
- имитировать зависимости
- сделать приложение модульным и тестируемым.

DI — это подмножество IoC
Другими словами, внедрение зависимостей — это всего лишь один из способов реализации инверсии управления
Вы также можете реализовать инверсию управления, используя события, делегаты, шаблон шаблона, фабричный метод или указатель службы.

IoC -> Service Locator, Events, Delegates, DI (-> Constructor Injection, Property Injection, Method Injection)


_______________________

Задачи сервиса аутентификации:
- Обработка введенных данных от пользователя.
- Определение ролей пользователя, успешно прошедшего аутентификацию.
- Выдача ответа об успешной аутентификации вместе с полной информацией о пользователе.

Обязательно наличие логирования:
Логирование — это запись действий, событий, исключительных ситуаций, либо любой другой значимой информации 
для приложения в файл, либо в базу данных. Зачастую, логирование производится в текстовый файл формата TXT.

public class Logger 
{
  public void WriteEvent(string eventMessage) 
  {
    Console.WriteLine(eventMessage);
  }
}


_______________________

AutoMapper и ViewModel

Есть модель User но у внешнего приложения, которое работает с нашей API, появляется потребность в отображении следующей информации: 
полное имя пользователя, включая имя и фамилию, и принадлежность к РФ.
Естественно, модель нашу мы менять не будем, а вот дополнительную модель для отображения мы сделаем. Она и будет называться ViewModel.

ViewModel — это модель представления. Задачей модели представления является отображение данных, необходимых для представления.


В проекте, который постепенно развивается, особенно в веб-API, появляются всё больше и больше моделей представления. 
И маппинг (создание из одной модели другой) модели в модели представления вручную отнимает всё больше и больше времени. 
Для решения данной проблемы существует AutoMapper.

AutoMapper - позволяет быстро производить проецирование одной модели на другую. 
(устанавливаем пакет под названием AutoMapper.Extensions.Microsoft.DependencyInjection)