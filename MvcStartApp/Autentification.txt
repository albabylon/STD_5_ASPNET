Аутентификация/авторизация

IoC (Inversion of Control) - инверсия управления. 
Основная цель инверсии управления — удаление зависимостей между объектами приложения.

IoC и DI позволяют разорвать зависимости между компонентами в вашем приложении и упростить тестирование и поддержку вашего приложения.
Однако инверсия управления и внедрение зависимостей — это не одно и то же.

Инверсия управления (IoC) — это шаблон проектирования, в котором поток управления программы инвертируется. 
IoC обычно используется для того, чтобы: 
- отделить компоненты вашего приложения, 
- поменять местами реализации зависимостей,
- имитировать зависимости
- сделать приложение модульным и тестируемым.

DI — это подмножество IoC
Другими словами, внедрение зависимостей — это всего лишь один из способов реализации инверсии управления
Вы также можете реализовать инверсию управления, используя события, делегаты, шаблон шаблона, фабричный метод или указатель службы.

IoC -> Service Locator, Events, Delegates, DI (-> Constructor Injection, Property Injection, Method Injection)


_______________________

Задачи сервиса аутентификации:
- Обработка введенных данных от пользователя.
- Определение ролей пользователя, успешно прошедшего аутентификацию.
- Выдача ответа об успешной аутентификации вместе с полной информацией о пользователе.

Обязательно наличие логирования:
Логирование — это запись действий, событий, исключительных ситуаций, либо любой другой значимой информации 
для приложения в файл, либо в базу данных. Зачастую, логирование производится в текстовый файл формата TXT.

public class Logger 
{
  public void WriteEvent(string eventMessage) 
  {
    Console.WriteLine(eventMessage);
  }
}


_______________________

AutoMapper и ViewModel

Есть модель User но у внешнего приложения, которое работает с нашей API, появляется потребность в отображении следующей информации: 
полное имя пользователя, включая имя и фамилию, и принадлежность к РФ.
Естественно, модель нашу мы менять не будем, а вот дополнительную модель для отображения мы сделаем. Она и будет называться ViewModel.

ViewModel — это модель представления. Задачей модели представления является отображение данных, необходимых для представления.


В проекте, который постепенно развивается, особенно в веб-API, появляются всё больше и больше моделей представления. 
И маппинг (создание из одной модели другой) модели в модели представления вручную отнимает всё больше и больше времени. 
Для решения данной проблемы существует AutoMapper.

AutoMapper - позволяет быстро производить проецирование одной модели на другую. 
(устанавливаем пакет под названием AutoMapper.Extensions.Microsoft.DependencyInjection)

_______________________

Аутентификация — это проверка введенных данных на подлинность. 
Логика сравнения данных при аутентификации во всех приложениях плюс-минус одинакова: 
сравнивается введенный логин и пароль с логином и паролем, который хранится в базе данных. И в нашем сервисе аутентификации мы это сделаем.

Авторизация — предоставление определённому лицу или группе лиц прав на выполнение определённых действий.


_______________________

Фильтры и Middleware

Фильтры уменьшают дублирование кода.

Фильтры в ASP.NET Core подразделяются на 5 типов.
- фильтр авторизации - определяют, авторизован ли пользователь для выполнения запроса.
- фильтр ресурсов - запускаются сразу после фильтров авторизации (если таковые присутствуют) и очень полезны для кэширования и повышения производительности
- фильтр действий - запускаются непосредственно до и после вызова метода действия.
- фильтр исключений - занимаются обработкой исключений до заполнения тела ответа.
- фильтр результатов - запускаются до и после выполнения результатов действий. Они запускаются только в том случае, если метод выполнен успешно

Фильтры исключений — одни из самых важных фильтров при разработке веб-сервиса по аутентификации.


Middleware — это промежуточное программное обеспечение, выполняющееся в конвейере приложения. 
Так же, как и в фильтры, в Middleware мы можем поместить логику обработки запроса. 
Единственное различие между фильтрами и Middleware состоит в том, что Middleware имеет доступ только к данным HttpContext. 
Фильтры, например, могут получить доступ к данным маршрутизации, а Middleware — нет.

На практике очень часто Middleware в ASP.NET Core используется при реализации аутентификации на основе токенов JWT.

JWT (JSON Web Token) — это открытый стандарт (RFC 7519) для создания токенов доступа, основанный на формате JSON.


_______________________________________________________________________________________________________________________________
ИТОГО

Благодаря инверсии зависимостей и ее частному случаю — DI — наш код получил слабую связность.
Благодаря AutoMapper наши модели представления маппятся из моделей домена одной строчкой кода.
Благодаря фильтрам наше приложение работает так, как мы этого хотим.
Глобальный обработчик ошибок превосходно справляется со своей задачей. Наш клиент не увидит никакой лишней информации, даже если в приложении что-то пошло не так.
Промежуточное программное обеспечение, именуемое как Middleware, работоспособно и готово к дальнейшему внедрению любой бизнес логики, вплоть до подключения аутентификации на основе JWT-токенов.

Инверсия управления (IoC)— это шаблон проектирования,в котором поток управления программы инвертируется. 
IoC обычно используется длятого, чтобы отделить компоненты вашего приложения, поменять местами реализации зависимостей,
имитировать зависимости и сделать ваше приложение модульным итестируемым.

ViewModel— это модель представления. Задачей моделипредставления является отображение данных, необходимых для представления.

AutoMapper позволяет быстро производить проецированиеодной модели на другую.

Аутентификация— это проверка введенных данных на подлинность. 
Логика сравнения данных при аутентификации во всех приложениях плюс-минус одинакова: сравнивается введенный логин и пароль с логином и паролем, 
который хранится в базе данных. И в нашем сервисе аутентификации мы это сделаем.

Авторизация— предоставление определённому лицу илигруппе лиц прав на выполнение определённых действий.

Фильтры в ASP.NET Core подразделяются на 5 типов.
- фильтр авторизации - определяют, авторизован ли пользователь для выполнения запроса.
- фильтр ресурсов - запускаются сразу после фильтров авторизации (если таковые присутствуют) и очень полезны для кэширования и повышения производительности
- фильтр действий - запускаются непосредственно до и после вызова метода действия.
- фильтр исключений - занимаются обработкой исключений до заполнения тела ответа.
- фильтр результатов - запускаются до и после выполнения результатов действий. Они запускаются только в том случае, если метод выполнен успешно

Middleware— это промежуточное программное обеспечение,выполняющееся в конвейере приложения. 
Так же, как и в фильтры, в Middlewareмы можем поместить логику обработки запроса. 
Единственное различие между фильтрамии Middleware состоит в том, что Middleware имеет доступ только к данным HttpContext.
Фильтры, например, могут получить доступ к данным маршрутизации, а Middleware— нет.