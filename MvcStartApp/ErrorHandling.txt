Обработка ошибок

Все ошибки приложения можно условно разделить на два вида:

1 Исключения
Правильный подход состоит в том, чтобы скрывать от пользователя технические ошибки приложения, но разработчик при этом должен их видеть.

Таким образом, у нас настроено, чтобы при запуске проекта в окружении Development разработчику выводилась страница с исключениями:
// Проверяем, не запущен ли проект в среде разработки
if (env.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}


2 Стандартные ошибки протокола HTTP
В стандартном функционале ASP.NET Core обработка ошибок HTTP не реализована (в отличие от исключений)

Мы сделали собственную обработку, чтобы пользователь не видел пустоту:
// Обработчик для ошибки "страница не найдена"
app.Run(async (context) =>
{
    await context.Response.WriteAsync($"Page not found");
});

Но мы можем пойти и по другому пути, подключить вместо этого соответствующее Middleware, которое будет поддерживать отправку статус-кодов:
// обрабатываем ошибки HTTP
app.UseStatusCodePages();

Можно пойти дальше и настроить показ отдельной HTML-страницы с текстом ошибки и так далее.
Но делать это нам нет необходимости. Так как, если мы будем использовать не стандартный проект, 
а MVC или Web API, то увидим, что там это уже реализовано за нас «из коробки» на очень хорошем уровне.