Web API

Нам может понадобиться создать веб-приложение, которое должно взаимодействовать с пользователем не напрямую.
Оно всё так же должно будет быть доступно по сети, но к нему не обязательно будет обращаться человек напрямую из браузера
Вместо пользователя клиентом может быть другое приложение или программа, которая просто отправляет или получает из нашего приложения данные.
Делает это так же, как и обычный пользователь с помощью браузера — по протоколу HTTP.

Графический интерфейс представления в таком случае становится не нужным, ведь программа — не пользователь, 
и передавать данные ей можно в гораздо более простом и примитивном текстовом формате, без всяких стилей и скриптов, как на обычной веб-странице.


!!Веб-приложения без интерфейса
Без View, получим приложение, контроллеры которого будут возвращать клиенту ответ в текстовом формате.
Возвращаться может как обычная строка, так и документ в формате XML или JSON

По сути, никакой разницы в общей архитектуре с точки зрения протокола HTTP здесь нет, 
ведь в случае обычного веб-сайта (или MVC-приложения) передается тоже текстовый документ, но в формате HTML.

Client1, Client2, ClientN -> (сообщения по HTTP) <-> Controller (еще может обращаться к сервисам внутренним и внешним) <-> DAL

Служба может обмениваться данными по протоколу HTTP с многими клиентами.
Получая от них данные в контроллере (точно так же, как и MVC-приложение), 
она может дальше обращаться к своей собственной базе данных и/или вызывать дополнительные службы 
(как внутренние, так и внешние, это могут быть как классы внутренних сервисов, так и классы-адаптеры, взаимодействующие с чем-либо снаружи.)

!!Где используются Web API
Мобильные приложения — банковскими, играми, мессенджерами и др. Очень многие из них постоянно обмениваются данными с сервером по сети
На данном сервере как раз и расположен Web API, который является точкой обмена данными, связывает наших клиентов с центром хранения и обработки данных.

Банковское приложение всегда подключено к API банка, где хранится информация о вашем аккаунте, балансе и так далее.

Мессенджер тоже является клиент-серверным приложением: как правило, все сообщения и основные настройки вашего профиля хранятся на сервере. 
Справедливости ради стоит сказать, что в случае с мессенджером обмен данными с API происходит не только по HTTP, но и по другим протоколам, 
которые, в отличие от HTTP, позволяют держать клиента постоянно подключенным (например, WebSocket), но сути это не меняет — архитектура та же.

Приложения соцсетей: у тех же Вконтакте, Facebook, Instagram за мобильным приложением скрывается API, 
которое обрабатывает данные клиента и служит точкой входа на сервер.

Интернет-магазины. У крупных магазинов, таких как Aliexpress, Ozon и других, есть веб-сайт и отдельно API. 
API обслуживает мобильные приложения для клиентов, через него они обмениваются данными, отправляют заказы и так далее.


При этом такое Web API совсем не обязательно самостоятельно обслуживает все запросы клиентов, 
хранит в базе и предоставляет все необходимые данные, как классический веб-сайт.

API может быть лишь входной точкой, эдаким «шлюзом», принимающим запрос клиента. 
Дальше, в зависимости от запроса из данного API, могут вызываться другие сервисы или API, ответственные за свои задачи.


ПРИМЕР:
- Клиент заказывает товар в Интернет-магазине.

- Web API магазина получает запрос, резервирует товар в базе, сохраняет заказ с новым статусом.

- Из нашего API по приему заказов может быть в свою очередь вызвано Web API SMS-шлюза, 
которое отвечает за отправку пользователю SMS с подтверждением заказа.

- Либо же взаимодействие может быть организовано не напрямую, а посредством общей шины данных, 
в которую публикуется сообщение о новом заказе, и из которой потом это сообщение «прочитает» получатель — сервис отправки SMS.

Каждый из компонентов может являться самостоятельным приложением — так называемым микросервисом. 
Такой подход к разработке систем соответственно называется микросервисным.


В современной веб-разработке web api используют также для обычных веб-сайтов:
Single Page Application (Одностраничные приложения). 
В этом случае у нас есть Web API (к примеру, на C#), и клиентская часть (к примеру, целиком на JavaScript — React или Angular).
«Клиентский» код будет абсолютно отдельным JavaScript-приложением, и оно будет запрашивать данные из Web API, получать их, 
«рисовать» интерфейс с помощью своих внутренних шаблонов и показывать его пользователю

Такой подход может быть весьма полезен, если вы, например, планируете выпуск собственного мобильного приложения. 
Делаете универсальное Web API, делаете клиентское приложение для браузера на React и делаете клиенты для мобильный платформ.