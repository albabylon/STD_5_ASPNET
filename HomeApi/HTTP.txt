HTTP расшифровывается как протокол передачи гипертекста (Hypertext Transfer Protocol).

Сейчас это основной протокол верхнего уровня, по которому работают большинство web-ресурсов в сети

Протокол HTTP основан на клиент-серверной архитектуре, 
клиентом при этом может быть браузер, мобильное приложение, консоль или любая другая программа, поддерживающая этот протокол. 
Чаще всего в роли клиента выступает ваш браузер, а в роли сервера — любой сайт или другой удаленный ресурс в сети.

_________

Каждый запрос (англ. request) отправляется серверу, который обрабатывает его и возвращает ответ (англ. response).

Большинство взаимодействий по протоколу HTTP с обычными сайтами осуществляется клиентами через браузер
В случае с Web API клиентом будет не обязательно браузер. Мы уже разобрались, что это может быть и приложение, и другая программа.

_________

HTTP с помощью Postman

_________

!!!Структура Запроса (REQUEST)!!!

1 Методы

GET - Запрос данных с сервера - Вы открываете любой сайт, например http://yandex.ru.

POST - Отправка новых данных на сервер, которая должна привести к созданию на нем новой сущности - Вы оставляете пост на форуме.

PUT/PATCH - Обновление существующих данных на сервере. 
В соответствии со стандартами веб-сервисов:
PUT - правильно использовать, когда требуется обновить существующий ресурс целиком, 
PATCH — когда необходимо его отредактировать.	

DELETE - Удаление данных с сервера - Удаление поста или комментария.

HEAD - Запрос заголовков. Как правило, используется для того, чтобы получить информацию о данных, находящихся по этому адресу, не запрашивая сами данные.	
У нас есть ссылка на скачивание файла, но мы не хотим его скачивать, а хотим узнать, какого он размера. 
Вместо того чтобы делать запрос GET, мы делаем запрос HEAD, и сервер вернет нам размер файла.

OPTIONS — запрос методов, поддерживаемых сервером.

TRACE — трассировка страницы.

CONNECT — подключение к Web-серверу через прокси.


2 Адрес (URL - Universal Resource Identifier) — это строка, однозначно определяющая местонахождение ресурса в интернете. 
Может быть как доменное имя, так и IP-адрес

3 Заголовки - HTTP не являются обязательными, но позволяют клиенту и серверу отправлять дополнительную информацию с запросом или ответом 
(передаются в формате КЛЮЧ:ЗНАЧЕНИЕ), например: Content-Type: Application/json

4 Параметры - могут использоваться в запросе для поиска информации на сервере по заданным условиям, например https://yandex.ru/search/?text=кино

5 Тело - для некоторых методов, например метода POST, мы можем передать данные в телe запроса.
Пример использования — отправка формы с логином и паролем на сайте, тело запроса тогда может иметь такой вид:
{
	login: "lalala",
	password: "12345"
}

________

!!!Структура Ответа (RESPONSE)!!!

HTTP-ответ содержит:

1 Строку состояния - в которой сервер указывает версию HTTP протокола и код состояния. Содержит код и текстовый результат
2 Заголовки - так же, как и в запросе, они не обязательны.
3 Тело - то, что пользователь запросил с сервера. Здесь тело содержит HTML-страницу. Наличие тела в ответе не обязательно.


Код ответа - позволяет нам (и клиенту!) понять, что именно произошло на сервере после нашего запроса:

!Информационные 100 – 199
Пример: Вы подключаетесь к банковскому сервису и запрашиваете у него статус транзакции. 
Вам возвращают код 102 Processing.Вы (клиент) понимаете, что операция в данный момент выполняется.

!Успешные 200 – 299
Пример: Вы регистрируетесь на новом ресурсе, отправляете в теле запроса логин и пароль. 
Вам возвращают код 201 Created. Новый пользователь успешно создан.

!Перенаправления 300 – 399
Пример: Вы запрашиваете страницу с отчетом из какой-либо информационной системы. 
Вам возвращают код 301 Moved permanently, и заголовок Location c указанием нового адреса ресурса.
Следующим запросом вы можете получить ресурс по новому адресу. 

!Клиентские ошибки 400 – 499
Пример: Вы запрашиваете страницу и допустили ошибку в адресе.
Сервер ответит, что такой страницы нет: 404 Not found

!Серверные ошибки 500 – 599
Пример: В запросе вы отправили неверные данные, разработчик не предусмотрел их проверку, 
и возникла ошибка в коде сервера (например, необработанное исключение)
Сервер ответит: 500 Internal Server Error

